library(magrittr)
force_names <- c("force")
embedded_data_ld <-SETSe_bicomp(g,
force = force_names,
max_iter = 60000,
tol = 2e-6,
sparse = FALSE,
sample = 1,
static_limit = NULL,
noisy_termination = FALSE)
set.seed(4)
g <- biconnected_network %>%
prepare_SETSe_continuous_hd(., node_names = "name", force_var =force_names, k = 1000 )
set.seed(4)
g <- biconnected_network %>%
prepare_SETSe_continuous_hd(., node_names = "name", force_var =force_names, k = 1000 )
list.files("/home/jonno/Pre-Project PhD Scripts/SETSe_high_dim/functions", full.names = T) %>%
lapply(., source)
d
set.seed(4)
g <- biconnected_network %>%
prepare_SETSe_continuous_hd(., node_names = "name", force_var =force_names, k = 1000 )
embedded_data_hd <-SETSe_auto_hd(g,
force = force_names,
max_iter = 60000,
tol = 2e-6,
sparse = FALSE,
sample = 1,
static_limit = NULL,
noisy_termination = FALSE)
embedded_data_ld <-SETSe_bicomp(g,
force = force_names,
max_iter = 60000,
tol = 2e-6,
sparse = FALSE,
sample = 1,
static_limit = NULL,
noisy_termination = FALSE)
library(devtools)
library(roxygen2)
```
rsetse update
```{r}
roxygenise( "~/rSETSe")
detach("package:rsetse", unload = TRUE)
install("~/rSETSe")
library(rsetse)
library(devtools)
library(roxygen2)
```
rsetse update
```{r}
roxygenise( "~/rSETSe")
detach("package:rsetse", unload = TRUE)
install("~/rSETSe")
library(rsetse)
library(rsetse)
library(dplyr)
library(ggraph)
library(igraph)
library(purrr)
library(stringr)
library(tidyr)
library(magrittr)
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
#BiocManager::install("ChemmineR")
library(ChemmineR)
list.files("/home/jonno/Pre-Project PhD Scripts/SETSe_high_dim/functions", full.names = T) %>%
lapply(., source)
biconnected_network <- rsetse::biconnected_network
force_names <- c("force")
set.seed(4)
g <- biconnected_network %>%
prepare_SETSe_continuous_hd(., node_names = "name", force_var =force_names, k = 1000 )
embedded_data_hd <-SETSe_auto_hd(g,
force = force_names,
max_iter = 60000,
tol = 2e-6,
sparse = FALSE,
sample = 1,
static_limit = NULL,
noisy_termination = FALSE)
embedded_data_ld <-SETSe_bicomp(g,
force = force_names,
max_iter = 60000,
tol = 2e-6,
sparse = FALSE,
sample = 1,
static_limit = NULL,
noisy_termination = FALSE)
embedded_data_ld
mass - NULL
test <- mass_adjuster(g, force = "force", resolution_limit = TRUE)
embedded_data_ld$node_embeddings %>%
mutate(acceleration = abs(static_force)/test)
embedded_data_ld$node_embeddings %>%
mutate(acceleration = static_force/test)
library(devtools)
library(roxygen2)
roxygenise( "~/rSETSe")
detach("package:rsetse", unload = TRUE)
install("~/rSETSe")
library(rsetse)
library(rsetse)
library(dplyr)
library(ggraph)
library(igraph)
library(purrr)
library(stringr)
library(tidyr)
library(magrittr)
list.files("/home/jonno/Pre-Project PhD Scripts/SETSe_high_dim/functions", full.names = T) %>%
lapply(., source)
force_names <- c("force")
set.seed(4)
g <- biconnected_network %>%
prepare_SETSe_continuous_hd(., node_names = "name", force_var =force_names, k = 1000 )
embedded_data_hd <-SETSe_auto_hd(g,
force = force_names,
max_iter = 60000,
tol = 2e-6,
sparse = FALSE,
sample = 1,
static_limit = NULL,
noisy_termination = FALSE)
embedded_data_ld <-SETSe_bicomp(g,
force = force_names,
max_iter = 60000,
tol = 2e-6,
sparse = FALSE,
sample = 1,
static_limit = NULL,
noisy_termination = FALSE)
embedded_data_ld$node_embeddings %>%
mutate(acceleration = static_force/test)
test <- mass_adjuster(g, force = "force", resolution_limit = TRUE)
embedded_data_ld$node_embeddings %>%
mutate(acceleration = static_force/test)
library(devtools)
library(roxygen2)
roxygenise( "~/rSETSe")
detach("package:rsetse", unload = TRUE)
install("~/rSETSe")
library(rsetse)
library(dplyr)
library(ggraph)
library(igraph)
library(purrr)
library(stringr)
library(tidyr)
library(magrittr)
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
#BiocManager::install("ChemmineR")
library(ChemmineR)
list.files("/home/jonno/Pre-Project PhD Scripts/SETSe_high_dim/functions", full.names = T) %>%
lapply(., source)
biconnected_network <- rsetse::biconnected_network
force_names <- c("force")
set.seed(4)
g <- biconnected_network %>%
prepare_SETSe_continuous_hd(., node_names = "name", force_var =force_names, k = 1000 )
embedded_data_hd <-SETSe_auto_hd(g,
force = force_names,
max_iter = 60000,
tol = 2e-6,
sparse = FALSE,
sample = 1,
static_limit = NULL,
noisy_termination = FALSE)
embedded_data_ld <-SETSe_bicomp(g,
force = force_names,
max_iter = 60000,
tol = 2e-6,
sparse = FALSE,
sample = 1,
static_limit = NULL,
noisy_termination = FALSE)
library(devtools)
library(roxygen2)
roxygenise( "~/rSETSe")
detach("package:rsetse", unload = TRUE)
install("~/rSETSe")
library(rsetse)
library(dplyr)
library(ggraph)
library(igraph)
library(purrr)
library(stringr)
library(tidyr)
library(magrittr)
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
#BiocManager::install("ChemmineR")
library(ChemmineR)
list.files("/home/jonno/Pre-Project PhD Scripts/SETSe_high_dim/functions", full.names = T) %>%
lapply(., source)
biconnected_network <- rsetse::biconnected_network
force_names <- c("force")
set.seed(4)
g <- biconnected_network %>%
prepare_SETSe_continuous_hd(., node_names = "name", force_var =force_names, k = 1000 )
embedded_data_hd <-SETSe_auto_hd(g,
force = force_names,
max_iter = 60000,
tol = 2e-6,
sparse = FALSE,
sample = 1,
static_limit = NULL,
noisy_termination = FALSE)
embedded_data_ld <-SETSe_bicomp(g,
force = force_names,
max_iter = 60000,
tol = 2e-6,
sparse = FALSE,
sample = 1,
static_limit = NULL,
noisy_termination = FALSE)
library(devtools)
library(roxygen2)
roxygenise( "~/rSETSe")
detach("package:rsetse", unload = TRUE)
install("~/rSETSe")
library(rsetse)
library(rsetse)
library(dplyr)
library(ggraph)
library(igraph)
library(purrr)
library(stringr)
library(tidyr)
library(magrittr)
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
#BiocManager::install("ChemmineR")
library(ChemmineR)
list.files("/home/jonno/Pre-Project PhD Scripts/SETSe_high_dim/functions", full.names = T) %>%
lapply(., source)
biconnected_network <- rsetse::biconnected_network
force_names <- c("force")
set.seed(4)
g <- biconnected_network %>%
prepare_SETSe_continuous_hd(., node_names = "name", force_var =force_names, k = 1000 )
embedded_data_hd <-SETSe_auto_hd(g,
force = force_names,
max_iter = 60000,
tol = 2e-6,
sparse = FALSE,
sample = 1,
static_limit = NULL,
noisy_termination = FALSE)
embedded_data_ld <-SETSe_bicomp(g,
force = force_names,
max_iter = 60000,
tol = 2e-6,
sparse = FALSE,
sample = 1,
static_limit = NULL,
noisy_termination = FALSE)
embedded_data_ld$node_embeddings
library(devtools)
library(roxygen2)
roxygenise( "~/rSETSe")
detach("package:rsetse", unload = TRUE)
install("~/rSETSe")
?SETSe_auto_hd
library(rsetse)
?SETSe_auto_hd
?SETSe_auto
library(devtools)
library(roxygen2)
roxygenise( "~/rSETSe")
detach("package:rsetse", unload = TRUE)
install("~/rSETSe")
library(rsetse)
?SETSe_auto_hd
library(devtools)
library(roxygen2)
roxygenise( "/home/jonno/rSETSe")
install("~/rSETSe")
setwd("/home/jonno/rSETSe")
pkgdown::build_site()
install.packages("pkgdown")
pkgdown::build_site()
devtools::check(remote = TRUE)
setwd( "/home/jonno/rSETSe")
library(devtools)
library(roxygen2)
setwd( "/home/jonno/rSETSe")
document()
setwd("/home/jonno")
library(devtools)
library(roxygen2)
setwd( "/home/jonno/rSETSe")
document()
setwd("/home/jonno")
install("rSETSe")
detach("package:rsetse", unload = TRUE)
library(rsetse)
packages <- c("rlang", "tidyverse", "igraph", "devtools", "snakecase")
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
sapply(packages, library, character.only = TRUE)
library(DependenciesGraphs)
library(PowerGridNetworking)
files_to_convert <- list.files("/home/jonno/rSETSe/R", full.names = T)
file_names <- tibble(class = "name",
function_name =  basename(files_to_convert) %>%
str_replace(.,"(.R$)", ""),
type = "arguments",
value =  basename(files_to_convert) %>%
str_replace(.,"(.R$)", "")
)
all_functions <- files_to_convert %>%
map_df(~{
print(basename(.x))
tx  <- read_lines(.x, )
look_for <- ".+(?=<-(\\s*)?function)"
#replace the
tx2 <- str_extract_all(tx, pattern = look_for) %>%
tibble(value = ., function_name = basename(.x) %>%
str_replace(.,"(.R$)", "")) %>%
filter(!is.na(value), !grepl("#", value), !grepl("character\\(0\\)", value) )
}) %>%
mutate( value = function_name,
type = "functions",
class = "name")
#make a data frame of all the arguments and variables in the package
all_funcs_in_package <- tibble(class = "name",
function_name = ls("package:rsetse"),
type = "functions",
value = ls("package:rsetse")
)
all_funcs_in_package
function_variable_df <-all_funcs_in_package$function_name %>% map_df(~{
test <-as.list(args(.x)) %>% as.matrix() %>%
tibble(arguments = rownames(.), variables = .[,1] %>% as.character(),
class = sapply(., class)) %>%
select(-1) %>%
mutate_all(., ~ifelse(nchar(.)<1, NA, .)) %>% #some of the strings are empty these need to be replaced with NA values and ignored
mutate(function_name = .x)
}) %>%
gather(key = type, value = value, -function_name, -class) %>%
bind_rows(., all_funcs_in_package) %>% #add in the function names themselves
bind_rows(., all_functions ) %>% #not all functions in the package are exported. This adds the function name of all the functions
#create the first pass changes
mutate(snakecase_1 = to_any_case(value)) %>%
filter(!(class %in% c("NULL", "logical", "numeric") & type == "variables"), !is.na(value)) #remove the elements that either can't or shouldn't be changed
?biconnec
#List of all the variables that need changing
change_df <- function_variable_df %>%
group_by(value, snakecase_1, type) %>%
summarise(counts = n()) %>%
ungroup
all_functions
#make a data frame of all the arguments and variables in the package
all_funcs_in_package <- tibble(class = "name",
function_name = ls("package:rsetse"),
type = "functions",
value = ls("package:rsetse")
)
all_funcs_in_package
function_variable_df <-all_funcs_in_package$function_name %>% map_df(~{
test <-as.list(args(.x)) %>% as.matrix() %>%
tibble(arguments = rownames(.), variables = .[,1] %>% as.character(),
class = sapply(., class)) %>%
select(-1) %>%
mutate_all(., ~ifelse(nchar(.)<1, NA, .)) %>% #some of the strings are empty these need to be replaced with NA values and ignored
mutate(function_name = .x)
}) %>%
gather(key = type, value = value, -function_name, -class) %>%
bind_rows(., all_funcs_in_package) %>% #add in the function names themselves
bind_rows(., all_functions ) %>% #not all functions in the package are exported. This adds the function name of all the functions
#create the first pass changes
mutate(snakecase_1 = to_any_case(value)) %>%
filter(!(class %in% c("NULL", "logical", "numeric") & type == "variables"), !is.na(value)) #remove the elements that either can't or shouldn't be changed
devtools::check(remote = TRUE)
library(devtools)
library(roxygen2)
devtools::check(remote = TRUE)
setwd("/home/jonno/rSETSe")
devtools::check(remote = TRUE)
?starts_with
?map
?bind_cols
?rename_with
library(devtools)
library(roxygen2)
setwd( "/home/jonno/rSETSe")
document()
setwd("/home/jonno")
install("rSETSe")
setwd("/home/jonno/rSETSe")
pkgdown::build_site()
devtools::check(remote = TRUE)
devtools::check(remote = TRUE)
get.edge.attribute()
?get.edge.attribute()
library(devtools)
library(roxygen2)
roxygenise( "/home/jonno/rSETSe")
detach("package:rsetse", unload = TRUE)
install("~/rSETSe")
setwd("/home/jonno/rSETSe")
pkgdown::build_site()
devtools::check(remote = TRUE)
?starts_with
?map
library(devtools)
library(roxygen2)
setwd( "/home/jonno/rSETSe")
document()
setwd("/home/jonno")
install("rSETSe")
setwd("/home/jonno/rSETSe")
pkgdown::build_site()
devtools::check(remote = TRUE)
library(devtools)
library(roxygen2)
roxygenise( "/home/jonno/rSETSe")
detach("package:rsetse", unload = TRUE)
install("~/rSETSe")
setwd("/home/jonno/rSETSe")
pkgdown::build_site()
devtools::check(remote = TRUE)
library(devtools)
library(roxygen2)
roxygenise( "/home/jonno/rSETSe")
detach("package:rsetse", unload = TRUE)
install("~/rSETSe")
devtools::check(remote = TRUE)
library(devtools)
library(roxygen2)
roxygenise( "/home/jonno/rSETSe")
detach("package:rsetse", unload = TRUE)
install("~/rSETSe")
library(rsetse)
devtools::check(remote = TRUE)
library(rsetse)
?prepare_SETSe_binary
library(devtools)
library(roxygen2)
roxygenise( "/home/jonno/rSETSe")
detach("package:rsetse", unload = TRUE)
install("~/rSETSe")
library(rsetse)
?prepare_SETSe_binary
library(rsetse)
?prepare_SETSe_binary
library(devtools)
library(roxygen2)
roxygenise( "/home/jonno/rSETSe")
detach("package:rsetse", unload = TRUE)
install("~/rSETSe")
library(rsetse)
?prepare_SETSe_binary
library(rsetse)
?prepare_SETSe_binary
library(devtools)
library(roxygen2)
roxygenise( "/home/jonno/rSETSe")
detach("package:rsetse", unload = TRUE)
install("~/rSETSe")
library(rsetse)
setwd("/home/jonno/rSETSe")
pkgdown::build_site()
devtools::check(remote = TRUE)
library(devtools)
library(roxygen2)
roxygenise( "/home/jonno/rSETSe")
detach("package:rsetse", unload = TRUE)
install("~/rSETSe")
library(rsetse)
```
```{r}
setwd("/home/jonno/rSETSe")
pkgdown::build_site()
devtools::check(remote = TRUE)
?prepare_SETSe_binary
library(devtools)
library(roxygen2)
roxygenise( "/home/jonno/rSETSe")
detach("package:rsetse", unload = TRUE)
install("~/rSETSe")
library(rsetse)
devtools::check(remote = TRUE)
setwd("/home/jonno/rSETSe")
pkgdown::build_site()
devtools::check(remote = TRUE)
library(devtools)
library(roxygen2)
roxygenise( "/home/jonno/rSETSe")
detach("package:rsetse", unload = TRUE)
install("~/rSETSe")
library(rsetse)
```{r}
setwd("/home/jonno/rSETSe")
pkgdown::build_site()
library(rsetse)
setwd("/home/jonno/rSETSe")
pkgdown::build_site()
devtools::check(remote = TRUE)
library(devtools)
library(roxygen2)
roxygenise( "/home/jonno/rSETSe")
detach("package:rsetse", unload = TRUE)
install("~/rSETSe")
library(rsetse)
devtools::check(remote = TRUE)
devtools::check_rhub(interactive = FALSE)
devtools::check_rhub(interactive = FALSE)
