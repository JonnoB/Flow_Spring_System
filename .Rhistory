group_by(Iter) %>%
summarise_all(sum) %>%
mutate(t = Iter/tstep) %>%
select(-component)
#gets back the memory of the convergence process.
#This is useful for knowing what logratio works for various network families
memory_df <- 1:length(StabilModels) %>%
map_df(~{
temp <- StabilModels[[.x]]$memory_df
temp$component <-  BlockNumbers[.x] #puts in the original block ordering so we can know which block was which
return(temp)
}) %>%
bind_rows(OriginBlock$memory_df %>% mutate(component = OriginBlock_number))
time_taken_df <- 1:length(StabilModels) %>%
map_df(~{
temp <- StabilModels[[.x]]$time_taken
temp$component <-  BlockNumbers[.x] #puts in the original block ordering so we can know which block was which
return(temp)
}) %>%
bind_rows( OriginBlock$time_taken %>%
mutate(component = OriginBlock_number))
#The biconnected components are converted to absolute values from relative ones
node_embeddings <- fix_z_to_origin(relative_blocks, ArticulationVect)
library(devtools)
library(roxygen2)
roxygenise( "/home/jonno/rSETSe")
detach("package:rSETSe", unload = TRUE)
install("~/rSETSe")
library(rSETSe)
embeddings_data <- SETSe_bicomp(g,
tstep = 0.01,
mass = NULL, #variable mass is useful when force is constant
tol = sum(abs(vertex_attr(g, "force")))/1000,
verbose = TRUE,
sparse = TRUE,
sample = 100,
static_limit = NULL,#sum(abs(vertex_attr(g, "force"))), #static_force is more than the starting force. just stop.
hyper_tol = 0.1,
hyper_iters = 50,
max_iter = 60000,
step_size = 1,
hyper_max = 1000)
library(devtools)
library(roxygen2)
roxygenise( "/home/jonno/rSETSe")
detach("package:rSETSe", unload = TRUE)
install("~/rSETSe")
library(rSETSe)
embeddings_data <- SETSe_bicomp(g,
tstep = 0.01,
mass = NULL, #variable mass is useful when force is constant
tol = sum(abs(vertex_attr(g, "force")))/1000,
verbose = TRUE,
sparse = TRUE,
sample = 100,
static_limit = NULL,#sum(abs(vertex_attr(g, "force"))), #static_force is more than the starting force. just stop.
hyper_tol = 0.1,
hyper_iters = 50,
max_iter = 60000,
step_size = 1,
hyper_max = 1000)
library(devtools)
library(roxygen2)
roxygenise( "/home/jonno/rSETSe")
detach("package:rSETSe", unload = TRUE)
install("~/rSETSe")
library(rSETSe)
embeddings_data <- SETSe_bicomp(g,
tstep = 0.01,
mass = NULL, #variable mass is useful when force is constant
tol = sum(abs(vertex_attr(g, "force")))/1000,
verbose = TRUE,
sparse = TRUE,
sample = 100,
static_limit = NULL,#sum(abs(vertex_attr(g, "force"))), #static_force is more than the starting force. just stop.
hyper_tol = 0.1,
hyper_iters = 50,
max_iter = 60000,
step_size = 1,
hyper_max = 1000)
library(devtools)
library(roxygen2)
roxygenise( "/home/jonno/rSETSe")
detach("package:rSETSe", unload = TRUE)
install("~/rSETSe")
library(rSETSe)
library(devtools)
library(roxygen2)
roxygenise( "/home/jonno/rSETSe")
detach("package:rSETSe", unload = TRUE)
install("~/rSETSe")
library(rSETSe)
library(devtools)
library(roxygen2)
roxygenise( "/home/jonno/rSETSe")
detach("package:rSETSe", unload = TRUE)
install("~/rSETSe")
library(rSETSe)
library(rSETSe)
library(devtools)
library(roxygen2)
roxygenise( "/home/jonno/rSETSe")
detach("package:rSETSe", unload = TRUE)
install("~/rSETSe")
library(devtools)
library(roxygen2)
roxygenise( "/home/jonno/rSETSe")
detach("package:rSETSe", unload = TRUE)
install("~/rSETSe")
packages <- c("tidyverse", "igraph","readr","readxl", "broom", "stringr", "xtable", "rlang", "latex2exp", "yardstick", "minpack.lm", "ggraph", "patchwork", "rsample", "VGAM", "class", "mclust", "R.matlab", "ranger")
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
select <- dplyr::select
arrange <- dplyr::arrange
map <- purrr::map
sapply(packages, library, character.only = TRUE)
library(rSETSe)
#Set up file system to read the correct folders this switches between aws and windows mode
#basewd <- "/home/jonno/Dropbox/Jonathan_Bourne_Phd_Folder"
LatexFolder <- "/home/jonno/Dropbox/Apps/ShareLaTeX/Sets Paper 1"
FiguresFolder <- file.path(LatexFolder, "Figures")
TablesFolder <- file.path(LatexFolder, "Tables")
MatricesFolder <- file.path(LatexFolder, "Matrices")
PLwd <- "/home/jonno/setse_1_data"
CodeFolder <- "/home/jonno/SETSe_assortativity_and_clusters"
SubcodeFolder <- file.path(CodeFolder, "sub_code")
#Load some other useful functions
list.files("/home/jonno/Useful_PhD__R_Functions", pattern = ".R", full.names = T) %>%
walk(~source(.x))
files <- list.files("/home/jonno/setse_1_data/conflict_networks", full.names = T)
source(file = file.path(SubcodeFolder, "medici_process.R"))
packages <- c("tidyverse", "igraph","readr","readxl", "broom", "stringr", "xtable", "rlang", "latex2exp", "yardstick", "minpack.lm", "ggraph", "patchwork", "rsample", "VGAM", "class", "mclust", "R.matlab", "ranger", "lubridate")
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
select <- dplyr::select
arrange <- dplyr::arrange
map <- purrr::map
sapply(packages, library, character.only = TRUE)
library(rSETSe)
#Set up file system to read the correct folders this switches between aws and windows mode
#basewd <- "/home/jonno/Dropbox/Jonathan_Bourne_Phd_Folder"
LatexFolder <- "/home/jonno/Dropbox/Apps/ShareLaTeX/Sets Paper 1"
FiguresFolder <- file.path(LatexFolder, "Figures")
TablesFolder <- file.path(LatexFolder, "Tables")
MatricesFolder <- file.path(LatexFolder, "Matrices")
PLwd <- "/home/jonno/setse_1_data"
CodeFolder <- "/home/jonno/SETSe_assortativity_and_clusters"
SubcodeFolder <- file.path(CodeFolder, "sub_code")
#Load some other useful functions
list.files("/home/jonno/Useful_PhD__R_Functions", pattern = ".R", full.names = T) %>%
walk(~source(.x))
uni_files <- list.files("/home/jonno/setse_1_data/facebook100/facebook100_igraph", full.names = T)
#Create the biconnected data for the graphs with the time it takes to calculate.
source(file = file.path(SubcodeFolder, "facebook_biconnected.R"))
#This data frame shows that all uni's have a connected component of over 99%
#the smaller components can be disgarded
source(file = file.path(SubcodeFolder, "create_facebook_uni_stats.R"))
uni_stats %>%
summarise(nodes = sum(max_component),
student_type_1 = sum(student_type_1),
student_type_2 =sum(student_type_2)) %>%
mutate(perc_1 = student_type_1/nodes,
perc_2 = student_type_2/nodes)
fb_metrics <- metric_set(accuracy, kap, bal_accuracy, f_meas)
source(file = file.path(SubcodeFolder, "compare_embeddings_with_graph.R"))
class_perf <- list.files(file.path(PLwd, "facebook_classifier"), full.names = TRUE) %>%
map_df(readRDS) %>%
mutate(estimate	= ifelse(is.na(estimate	), 1, estimate),
network_knn = ifelse(is.na(network_knn), 1, network_knn)) %>%
mutate(diff = estimate-network_knn,
better = (diff>0)*1,
naive = network_type2/(network_type1+network_type2),
better_naive = estimate>naive,
metric = case_when(
metric =="bal_accuracy"~"Balanced accuracy",
metric =="f_meas" ~"F measure",
metric =="accuracy" ~"Accuracy",
TRUE ~"Cohen's kappa"
))
relative_embeddings <-class_perf %>%
#  filter(metric!= "accuracy") %>%
group_by(metric, active_period, k, model) %>%
summarise(better = mean(better, na.rm = T),
better_naive = mean(better_naive, na.rm  = T),
na_val = sum(is.na(better)),
student_1 = sum(student_1),
student_2 = sum(student_2))
relative_embeddings %>%
# filter(active_period==2005) %>%
ggplot(aes(x = k, y = better, colour = model))+
facet_wrap(~metric, scales ="free_y") +
geom_line() +
labs(title = "Predicting student type from year embeddings relative to graph neighbour voting",
x = "number of nearest neighbours",
y ="fraction of times embedding beats graph neighbour voting")
relative_embeddings$data
tibble(LETTERS[1:5])
tibble(name = LETTERS[1:5], value = 1:5) %>%
ggplot(aes(x = name, y = value, colours = name)) + geom_point
tibble(name = LETTERS[1:5], value = 1:5) %>%
ggplot(aes(x = name, y = value, colours = name)) + geom_point()
tibble(name = LETTERS[1:5], value = 1:5) %>%
ggplot(aes(x = name, y = value, colors = name)) + geom_point()
tibble(id = LETTERS[1:5], value = 1:5) %>%
ggplot(aes(x = id, y = value, colors = id)) + geom_point()
tibble(id = LETTERS[1:5], value = 1:5) %>%
ggplot(aes(x = id, y = value, colors = id)) + geom_col()
tibble(id = LETTERS[1:5], value = 1:5) %>%
ggplot(aes(x = id, y = value, fill = id)) + geom_col()
colour_data <- tibble(id = LETTERS[1:5], value = 1:5) %>%
ggplot(aes(x = id, y = value, fill = id)) + geom_col()
colour_data$data
colour_data$scales
ggplot_build(colour_data)
ggplot_build(colour_data)$data
colour_data <- tibble(id = LETTERS[1:5], value = 1:5) %>%
ggplot(aes(x = id, y = value, fill = id)) + geom_col() %>%
ggplot_build()
colour_data <- tibble(id = LETTERS[1:5], value = 1:5) %>%
ggplot(aes(x = id, y = value, fill = id)) + geom_col() %>%
ggplot_build()
ggplot_build()}
colour_data <- tibble(id = LETTERS[1:5], value = 1:5) %>%
ggplot(aes(x = id, y = value, fill = id)) + geom_col() %>%{ggplot_build(.)}
colour_data <- {tibble(id = LETTERS[1:5], value = 1:5) %>%
ggplot(aes(x = id, y = value, fill = id)) + geom_col()} %>%{ggplot_build(.)}
colour_data <- {tibble(id = LETTERS[1:5], value = 1:5) %>%
ggplot(aes(x = id, y = value, fill = id)) + geom_col()} %>%ggplot_build(.)
colour_data
colour_data$data
relative_embeddings %>%
# filter(active_period==2005) %>%
ggplot(aes(x = k, y = better, colour = model))+
facet_wrap(~metric, scales ="free_y") +
geom_line() +
labs(title = "Predicting student type from year embeddings relative to graph neighbour voting",
x = "number of nearest neighbours",
y ="fraction of times embedding beats graph neighbour voting") +
scale_colour_manual(values = c("red", "blue", "green"))
relative_embeddings %>%
# filter(active_period==2005) %>%
ggplot(aes(x = k, y = better, colour = model))+
facet_wrap(~metric, scales ="free_y") +
geom_line() +
labs(title = "Predicting student type from year embeddings relative to graph neighbour voting",
x = "number of nearest neighbours",
y ="fraction of times embedding beats graph neighbour voting") +
scale_colour_manual(values = c("red", "blue", "green"))
relative_embeddings %>%
# filter(active_period==2005) %>%
ggplot(aes(x = k, y = better, colour = model))+
facet_wrap(~metric, scales ="free_y") +
geom_line() +
labs(title = "Predicting student type from year embeddings relative to graph neighbour voting",
x = "number of nearest neighbours",
y ="fraction of times embedding beats graph neighbour voting")
colour_data$data
colour_data$data$fill[-3]
colour_data$data[[1]]$fill[-3]
relative_embeddings %>%
# filter(active_period==2005) %>%
ggplot(aes(x = k, y = better, colour = model))+
facet_wrap(~metric, scales ="free_y") +
geom_line() +
labs(title = "Predicting student type from year embeddings relative to graph neighbour voting",
x = "number of nearest neighbours",
y ="fraction of times embedding beats graph neighbour voting") +
scale_colour_manual(values = colour_data$data[[1]]$fill[-3])
ggsave(file.path(FiguresFolder,  "facebook_knn_vs_graph_vote.pdf"))
packages <- c("tidyverse", "igraph","readr","readxl", "broom", "stringr", "xtable", "rlang", "animation", "caret", "sf", "rgdal", "sf", "gstat", "automap", "rayshader", "latex2exp", "yardstick", "minpack.lm", "gganimate", "tmaptools", "rgeos", "raster", "tigris", "ggraph", "rsample")
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
select <- dplyr::select
arrange <- dplyr::arrange
sapply(packages, library, character.only = TRUE)
library(PowerGridNetworking)
library(rSETSe)
#Set up file system to read the correct folders this switches between aws and windows mode
basewd <- "/home/jonno/Dropbox/Jonathan_Bourne_Phd_Folder"
CodeFolder <- "/home/jonno/setse_and_network_robustness"
datafile <- "/home/jonno/Dropbox/Jonathan_Bourne_Phd_Folder/ETYSAppendixB"
LatexFolder <- "/home/jonno/Dropbox/Apps/ShareLaTeX/Sets Paper 2"
FiguresFolder <- file.path(LatexFolder, "Figures")
TablesFolder <- file.path(LatexFolder, "Tables")
MatricesFolder <- file.path(LatexFolder, "Matrices")
Tariff <- file.path(basewd,"Tariff and Transport")
#PLwd <- "/media/jonno/Seagate Expansion Drive/System_Dynamics"
Deletion_Order_Folder <-  file.path("/home/jonno/Dropbox/AWS_Simulation_Files") #Only one of the deletion order folders is needed. Either Nodes or Edges
project_folder <- "/home/jonno/Dropbox/IEEE_Networks" #"/media/jonno/Seagate Expansion Drive/IEEE_Networks"
embeddings_path <- file.path(project_folder, "embeddings")
power_grid_graphs_path <- file.path(project_folder, "power_grid_graphs")
#Load some other useful functions
list.files("/home/jonno/Useful_PhD__R_Functions", pattern = ".R", full.names = T) %>%
walk(~source(.x))
VertexMetaData2 <- VertexMetaData %>%
mutate(NodeType = case_when(
BalencedPower>0 ~"Generator",
BalencedPower< 0~"Demand",
TRUE ~ "Transfer"
),
NodeType2 = case_when(
Demand>0 & Generation>0 ~"Hybrid",
TRUE ~ NodeType
)) %>% select(Name, NodeType, NodeType2, BalencedPower)
#Is this function here neccessary? or is it in some folder that gets it all laoded?
#function that finds what fraction of the full range the metric is
kappa <- function(value){
(value-min(value))/(max(value) - min(value))
}
file.path(project_folder)
file.path(project_folder, "embeddings", "graph2vec")
graph_2vec_2_files <- (file.path(project_folder, "embeddings", "graph2vec"))
graph_2vec_2_files
graph_2vec_2_files
graph_2vec_2_files <- lis.files(file.path(project_folder, "embeddings", "graph2vec"))
graph_2vec_2_files <- list.files(file.path(project_folder, "embeddings", "graph2vec"))
graph_2vec_2_files
graph_2vec_2_files <- list.files(file.path(project_folder, "embeddings", "graph2vec"), full.names = T)
graph_2vec_2_files
.x <- "/home/jonno/Dropbox/IEEE_Networks/embeddings/graph2vec/IEEE_118.csv"
.x
test <- read_csv(.x)
View(test)
?separate
test$file
test <- read_csv(.x) %>%
mutate(file = file %>% str_remove(., ".csv"))
test <- read_csv(.x) %>%
mutate(file = file %>% str_remove(., ".csv")) %>%
separate(., col = file, into = c("drop1", "fract",
"drop2", "ec",
"drop3", "largest",
"drop4", "smallest",
"drop5", "drop6", "robin_hood"))
test <- read_csv(.x) %>%
mutate(file = file %>% str_remove(., ".csv")) %>%
separate(., col = file, into = c("drop1", "fract",
"drop2", "ec",
"drop3", "largest",
"drop4", "smallest",
"drop5", "drop6", "robin_hood"),
sep = "_")
test <- read_csv(.x) %>%
mutate(file = file %>% str_remove(., ".csv")) %>%
separate(., col = file, into = c("drop1", "fract",
"drop2", "ec",
"drop3", "largest",
"drop4", "smallest",
"drop5", "drop6", "robin_hood"),
sep = "_") %>%
select(-contains("drop"))
test <- read_csv(.x) %>%
mutate(file = file %>% str_remove(., ".csv")) %>%
separate(., col = file, into = c("drop1", "fract",
"drop2", "ec",
"drop3", "largest",
"drop4", "smallest",
"drop5", "drop6", "robin_hood"),
sep = "_") %>%
select(-contains("drop")) %>%
mutate(grid = basename(.x) %>% str_remove(., ".csv"))
graph_2vec_2_files <- list.files(file.path(project_folder, "embeddings", "graph2vec"), full.names = T) %>%
map_df(~{
out <- read_csv(.x) %>%
mutate(file = file %>% str_remove(., ".csv")) %>%
separate(., col = file, into = c("drop1", "fract",
"drop2", "ec",
"drop3", "largest",
"drop4", "smallest",
"drop5", "drop6", "robin_hood"),
sep = "_") %>%
select(-contains("drop")) %>%
mutate(grid = basename(.x) %>% str_remove(., ".csv"))
return(out)
})
graph2vec_df <- list.files(file.path(project_folder, "embeddings", "graph2vec"), full.names = T) %>%
map_df(~{
out <- read_csv(.x) %>%
mutate(file = file %>% str_remove(., ".csv")) %>%
separate(., col = file, into = c("drop1", "fract",
"drop2", "ec",
"drop3", "largest",
"drop4", "smallest",
"drop5", "drop6", "robin_hood"),
sep = "_") %>%
select(-contains("drop")) %>%
mutate(grid = basename(.x) %>% str_remove(., ".csv"))
return(out)
})
graph2vec_df <- list.files(file.path(project_folder, "embeddings", "graph2vec"), full.names = T) %>%
map_df(~{
out <- read_csv(.x) %>%
mutate(file = file %>% str_remove(., ".csv")) %>%
separate(., col = file, into = c("drop1", "fract",
"drop2", "ec",
"drop3", "largest",
"drop4", "smallest",
"drop5", "drop6", "robin_hood"),
sep = "_") %>%
select(-contains("drop")) %>%
mutate(grid = basename(.x) %>% str_remove(., ".csv"))
return(out)
}) %>%
rename(dim_1 = `0`, dim_2 = `1`)
graph2vec_df %>%
ggplot(aes(x = ))
?separate
graph2vec_df %>%
ggplot(aes(x = dim_1, dim_2, colour = ec)) +geom_point() +
facet_wrap(~grid)
graph2vec_df <- list.files(file.path(project_folder, "embeddings", "graph2vec_32"), full.names = T) %>%
map_df(~{
out <- read_csv(.x) %>%
mutate(file = file %>% str_remove(., ".csv")) %>%
separate(., col = file, into = c("drop1", "fract",
"drop2", "ec",
"drop3", "largest",
"drop4", "smallest",
"drop5", "drop6", "robin_hood"),
sep = "_") %>%
select(-contains("drop")) %>%
mutate(grid = basename(.x) %>% str_remove(., ".csv"))
return(out)
}) %>%
rename(dim_1 = `0`, dim_2 = `1`)
list.files(file.path(project_folder, "embeddings", "graph2vec_32"), full.names = T)
.x <-  "/home/jonno/Dropbox/IEEE_Networks/embeddings/graph2vec_32/IEEE_118.csv"
out <- read_csv(.x) %>%
mutate(file = file %>% str_remove(., ".csv")) %>%
separate(., col = file, into = c("drop1", "fract",
"drop2", "ec",
"drop3", "largest",
"drop4", "smallest",
"drop5", "drop6", "robin_hood"),
sep = "_") %>%
select(-contains("drop")) %>%
mutate(grid = basename(.x) %>% str_remove(., ".csv"))
out <- read_csv(.x)
View(out)
?read_csv
out <- read_csv(.x, col_names = FALSE)
out <- read_csv(.x, col_names = FALSE)
out <- read_csv(.x, col_names = FALSE,skip = 1)
out <- read_csv(.x, col_names = FALSE,skip = 1) %>%
mutate(file = file %>% str_remove(., ".csv")) %>%
separate(., col = file, into = c("drop1", "fract",
"drop2", "ec",
"drop3", "largest",
"drop4", "smallest",
"drop5", "drop6", "robin_hood"),
sep = "_") %>%
select(-contains("drop")) %>%
mutate(grid = basename(.x) %>% str_remove(., ".csv"))
library(pkgkdown)
library(pkgdown)
install.packages("pkgdown")
library(usethis)
library(pkgdown)
install.packages("ragg")
install.packages("textshaping")
install.packages("pkgdown")
library(usethat)
install.packages("usethat")
update.packages(ask = FALSE, checkBuilt = TRUE)
library(usethat)
install.packages("usethat")
usethis::use_pkgdown()
library(pkgdown)
isntall.packages("pkgdown")
install.packages("pkgdown")
install.packages("harfbuzz")
install.packages("textshaping")
install.packages("textshaping")
packages <- c("tidyverse", "igraph","readr","readxl", "broom", "stringr", "xtable", "rlang", "latex2exp", "yardstick", "minpack.lm", "ggraph", "patchwork", "rsample", "VGAM", "class", "mclust", "R.matlab", "ranger")
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(devtools)
library(roxygen2)
roxygenise( "/home/jonno/rSETSe")
detach("package:rSETSe", unload = TRUE)
install("~/rSETSe")
setwd("/home/jonno/rSETSe")
pkgdown::build_site()
.Last.error.trace
devtools::check()
.rs.restartR()
library(devtools)
library(roxygen2)
roxygenise( "/home/jonno/rSETSe")
detach("package:rSETSe", unload = TRUE)
install("~/rSETSe")
library(rSETSe)
devtools::check()
packages <- c("tidyverse", "igraph","readr","readxl", "broom", "stringr", "xtable", "rlang", "animation", "caret", "sf", "rgdal", "sf", "gstat", "automap", "rayshader", "latex2exp", "yardstick", "gganimate", "tmaptools", "rgeos", "raster","ggraph", "rsample")
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
install.packages("MASS")
devtools::check()
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
devtools::check()
library(devtools)
library(roxygen2)
roxygenise( "/home/jonno/rSETSe")
detach("package:rSETSe", unload = TRUE)
install("~/rSETSe")
library(rSETSe)
devtools::check()
library(Matrix)
remove.packages("Matrix", lib="~/R/x86_64-pc-linux-gnu-library/4.0")
