% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SETSe_data_prep.R
\name{SETSe_data_prep}
\alias{SETSe_data_prep}
\title{Preapre data for the `SETSe_core` function}
\usage{
SETSe_data_prep(
  g,
  force,
  distance,
  mass,
  edge_name = edge_name,
  k = "k",
  sparse = FALSE
)
}
\arguments{
\item{g}{An igraph object of the network that is going to be turned into a spring embedding.}

\item{force}{a character string. The node attribute that contains the force information for the network.}

\item{distance}{a character string. The edge attribute that contains the distance of the edge.}

\item{mass}{A numeric. This is the mass constant of the nodes in normalised networks this is set to 1.}

\item{edge_name}{a character string. The edge attribute that contains the names of all the edges.}

\item{k}{A character string. This is k for the moment don't change it.}

\item{sparse}{Logical. Whether or not the function should be run using sparse matrices. must match the actual matrix, this could prob be automated}
}
\value{
Returns a list that contains all the parts needed to allow the SETSe family of functions and the two_node_solution
function to produce embeddings.
}
\description{
This is a helper function that makes the `SETSe` function code easier to read. Seldom used otherwise
}
\details{
The file outputs a named list containing

The output of the function is different depending on the number of nodes in the network. This optimises the
operations performed so that networks that will be solved using the two node solution only have data for the two node solution
whilst networks that will be solved using the SETSe algorithm do not have data required for the two node solution.
This minimises time and memory, which is useful when large numbers of data preparations need to be performed, for example
when running setse_bicomp() on a large network.
}
